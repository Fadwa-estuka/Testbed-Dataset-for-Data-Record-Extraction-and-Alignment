// Generated by CoffeeScript 1.6.2
/**
@license Sticky-kit v1.1.2 | MIT | Leaf Corcoran 2015 | http://leafo.net
*/

(function() {
  var $, win;

  $ = this.jQuery || window.jQuery;

  win = $(window);

  $.fn.stick_in_parent = function(opts) {
    var doc, elm, enable_bottoming, inner_scrolling, manual_spacer, offset_top, outer_width, parent_selector, recalc_every, sticky_class, _fn, _i, _len;

    if (opts == null) {
      opts = {};
    }
    sticky_class = opts.sticky_class, inner_scrolling = opts.inner_scrolling, recalc_every = opts.recalc_every, parent_selector = opts.parent, offset_top = opts.offset_top, manual_spacer = opts.spacer, enable_bottoming = opts.bottoming;
    if (offset_top == null) {
      offset_top = 0;
    }
    if (parent_selector == null) {
      parent_selector = void 0;
    }
    if (inner_scrolling == null) {
      inner_scrolling = true;
    }
    if (sticky_class == null) {
      sticky_class = "is_stuck";
    }
    doc = $(document);
    if (enable_bottoming == null) {
      enable_bottoming = true;
    }
    outer_width = function(el) {
      var computed, w, _el;

      if (window.getComputedStyle) {
        _el = el[0];
        computed = window.getComputedStyle(el[0]);
        w = parseFloat(computed.getPropertyValue("width")) + parseFloat(computed.getPropertyValue("margin-left")) + parseFloat(computed.getPropertyValue("margin-right"));
        if (computed.getPropertyValue("box-sizing") !== "border-box") {
          w += parseFloat(computed.getPropertyValue("border-left-width")) + parseFloat(computed.getPropertyValue("border-right-width")) + parseFloat(computed.getPropertyValue("padding-left")) + parseFloat(computed.getPropertyValue("padding-right"));
        }
        return w;
      } else {
        return el.outerWidth(true);
      }
    };
    _fn = function(elm, padding_bottom, parent_top, parent_height, top, height, el_float, detached) {
      var bottomed, detach, fixed, last_pos, last_scroll_height, offset, parent, recalc, recalc_and_tick, recalc_counter, spacer, tick;

      if (elm.data("sticky_kit")) {
        return;
      }
      elm.data("sticky_kit", true);
      last_scroll_height = doc.height();
      parent = elm.parent();
      if (parent_selector != null) {
        parent = parent.closest(parent_selector);
      }
      if (!parent.length) {
        throw "failed to find stick parent";
      }
      fixed = false;
      bottomed = false;
      spacer = manual_spacer != null ? manual_spacer && elm.closest(manual_spacer) : $("<div />");
      if (spacer) {
        spacer.css('position', elm.css('position'));
      }
      recalc = function() {
        var border_top, padding_top, restore;

        if (detached) {
          return;
        }
        last_scroll_height = doc.height();
        border_top = parseInt(parent.css("border-top-width"), 10);
        padding_top = parseInt(parent.css("padding-top"), 10);
        padding_bottom = parseInt(parent.css("padding-bottom"), 10);
        parent_top = parent.offset().top + border_top + padding_top;
        parent_height = parent.height();
        if (fixed) {
          fixed = false;
          bottomed = false;
          if (manual_spacer == null) {
            elm.insertAfter(spacer);
            spacer.detach();
          }
          elm.css({
            position: "",
            top: "",
            width: "",
            bottom: ""
          }).removeClass(sticky_class);
          restore = true;
        }
        top = elm.offset().top - (parseInt(elm.css("margin-top"), 10) || 0) - offset_top;
        height = elm.outerHeight(true);
        el_float = elm.css("float");
        if (spacer) {
          spacer.css({
            width: outer_width(elm),
            height: height,
            display: elm.css("display"),
            "vertical-align": elm.css("vertical-align"),
            "float": el_float
          });
        }
        if (restore) {
          return tick();
        }
      };
      recalc();
      if (height === parent_height) {
        return;
      }
      last_pos = void 0;
      offset = offset_top;
      recalc_counter = recalc_every;
      tick = function() {
        var css, delta, recalced, scroll, will_bottom, win_height, check_top;

        if (detached) {
          return;
        }
        recalced = false;
        if (recalc_counter != null) {
          recalc_counter -= 1;
          if (recalc_counter <= 0) {
            recalc_counter = recalc_every;
            recalc();
            recalced = true;
          }
        }
        if (!recalced && doc.height() !== last_scroll_height) {
          recalc();
          recalced = true;
        }
        scroll = win.scrollTop();
        if (last_pos != null) {
          delta = scroll - last_pos;
        }
        last_pos = scroll;
        if (fixed) {
          if (enable_bottoming) {
            will_bottom = scroll + height + offset > parent_height + parent_top;
            if (bottomed && !will_bottom) {
              bottomed = false;
              elm.css({
                position: "fixed",
                bottom: "",
                top: offset
              }).trigger("sticky_kit:unbottom");
            }
          }
          if (scroll < top) {
            fixed = false;
            offset = offset_top;
            if (manual_spacer == null) {
              if (el_float === "left" || el_float === "right") {
                elm.insertAfter(spacer);
              }
              spacer.detach();
            }
            css = {
              position: "",
              width: "",
              top: ""
            };
            elm.css(css).removeClass(sticky_class).trigger("sticky_kit:unstick");
          }
          if (inner_scrolling) {
            win_height = win.height();
            if (height + offset_top > win_height) {
              if (!bottomed) {
                offset -= delta;
                offset = Math.max(win_height - height, offset);
                offset = Math.min(offset_top, offset);
                if (fixed) {
                  elm.css({
                    top: offset + "px"
                  });
                }
              }
            }
          }
        } else {
          if (elm.is(":visible") && scroll > top) {
            // HR-161
            check_top = elm.offset().top - (parseInt(elm.css("margin-top"), 10) || 0) - offset_top;
            if (check_top != top) {
              top = check_top;
            } else if (top > 0) {
              fixed = true;
              css = {
                position: "fixed",
                top: offset
              };
              css.width = elm.css("box-sizing") === "border-box" ? elm.outerWidth() + "px" : elm.width() + "px";
              elm.css(css).addClass(sticky_class);
              if (manual_spacer == null) {
                elm.after(spacer);
                if (el_float === "left" || el_float === "right") {
                  spacer.append(elm);
                }
              }
              elm.trigger("sticky_kit:stick");
            }
          }
        }
        if (fixed && enable_bottoming) {
          if (will_bottom == null) {
            will_bottom = scroll + height + offset > parent_height + parent_top;
          }
          if (!bottomed && will_bottom) {
            bottomed = true;
            if (parent.css("position") === "static") {
              parent.css({
                position: "relative"
              });
            }
            return elm.css({
              position: "absolute",
              bottom: padding_bottom,
              top: "auto"
            }).trigger("sticky_kit:bottom");
          }
        }
      };
      recalc_and_tick = function() {
        recalc();
        return tick();
      };
      detach = function() {
        detached = true;
        win.off("touchmove", tick);
        win.off("scroll", tick);
        win.off("resize", recalc_and_tick);
        $(document.body).off("sticky_kit:recalc", recalc_and_tick);
        elm.off("sticky_kit:detach", detach);
        elm.removeData("sticky_kit");
        elm.css({
          position: "",
          bottom: "",
          top: "",
          width: ""
        });
        parent.position("position", "");
        if (fixed) {
          if (manual_spacer == null) {
            if (el_float === "left" || el_float === "right") {
              elm.insertAfter(spacer);
            }
            spacer.remove();
          }
          return elm.removeClass(sticky_class);
        }
      };
      win.on("touchmove", tick);
      win.on("scroll", tick);
      win.on("resize", recalc_and_tick);
      $(document.body).on("sticky_kit:recalc", recalc_and_tick);
      elm.on("sticky_kit:detach", detach);
      return setTimeout(tick, 0);
    };
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      elm = this[_i];
      _fn($(elm));
    }
    return this;
  };

}).call(this);
;
!function(t){var i=t(window);t.fn.visible=function(t,e,o){if(!(this.length<1)){var r=this.length>1?this.eq(0):this,n=r.get(0),f=i.width(),h=i.height(),o=o?o:"both",l=e===!0?n.offsetWidth*n.offsetHeight:!0;if("function"==typeof n.getBoundingClientRect){var g=n.getBoundingClientRect(),u=g.top>=0&&g.top<h,s=g.bottom>0&&g.bottom<=h,c=g.left>=0&&g.left<f,a=g.right>0&&g.right<=f,v=t?u||s:u&&s,b=t?c||a:c&&a;if("both"===o)return l&&v&&b;if("vertical"===o)return l&&v;if("horizontal"===o)return l&&b}else{var d=i.scrollTop(),p=d+h,w=i.scrollLeft(),m=w+f,y=r.offset(),z=y.top,B=z+r.height(),C=y.left,R=C+r.width(),j=t===!0?B:z,q=t===!0?z:B,H=t===!0?R:C,L=t===!0?C:R;if("both"===o)return!!l&&p>=q&&j>=d&&m>=L&&H>=w;if("vertical"===o)return!!l&&p>=q&&j>=d;if("horizontal"===o)return!!l&&m>=L&&H>=w}}}}(jQuery);
;
/**
 * @file
 * A JavaScript file for the theme.
 *
 * In order for this JavaScript to be loaded on pages, see the instructions in
 * the README.txt next to this file.
 */

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it with an "anonymous closure". See:
// - http://drupal.org/node/1446420
// - http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth

var h_body;

(function ($, Drupal, window, document, undefined) {


// Place your code here.

$(document).ready(function() {
// navigation
  $("#main-menu .menu-views").each(function() {
    $(this).parent().css('padding-right', 0);
  });

  var _offset = $("body").hasClass("admin-menu") ? 29 : 0;
  var top = 0;
  if ($('#navigation').length > 0) {
    setInterval(function(){
      var pageObjectDfpBlock = document.querySelector('[id*=block-dfp-1x1]');
      var pageObjectUtContainer = document.querySelector('body .ut_container');
      //check if has block dfp & block in body check height 300ms
      if(pageObjectDfpBlock && pageObjectUtContainer){
        setInterval(function(){
          top = document.querySelector('#navigation').getBoundingClientRect();
        }, 500);
      } else {
        setInterval(function(){top = document.querySelector('#navigation').getBoundingClientRect();},300);
      }
    }, 300);
  }
  //$('#header').height($('#header').height());
  $(window).scroll(function (event) {
    var pageObjectHeaderHeight;
    var pageObjectDfpBlock = document.querySelector('[id*=block-dfp-1x1]');
    var pageObjectUtContainer = document.querySelector('body .ut_container');
    var pageObjectPageTop = document.querySelector('#page').getBoundingClientRect();
    if(pageObjectDfpBlock && pageObjectUtContainer){
      pageObjectHeaderHeight = document.querySelector('body #header').offsetHeight;
      top = document.querySelector('#navigation').getBoundingClientRect();
      var y = ($(this).scrollTop()) - pageObjectUtContainer.offsetHeight;
    } else {
      pageObjectHeaderHeight = document.querySelector('body #header').offsetHeight;
      top = document.querySelector('#navigation').getBoundingClientRect();
      var y = $(this).scrollTop();
    }

    //console.log('scroll position = y ' + y + ' postion navigation = ' + top.top);

    var documentScrollLeft = $(document).scrollLeft();
    $('#header > div.floating-block-active').css({'right': documentScrollLeft});
    if (y > pageObjectPageTop.top) {
      if (!$('#header > div').hasClass("floating-block-active")) {
        $('#header > div').addClass('floating-block-active');
        $('body #header').css('height', pageObjectHeaderHeight);
      }
    } else {
      $('#header > div').removeClass('floating-block-active').removeAttr('style');
      $('body #header').removeAttr('style');
    }
  });

  googletag.cmd.push(function() {
    googletag.pubads().addEventListener('slotRenderEnded', function(event) {
      if (event.slot.getSlotElementId() == "dfp-ad-modal_window_ad" && !event.isEmpty) {
        //if ($('#dfp-ad-overlay .block-dfp').find("iframe:not([id*=hidden])").length) {
        if ($('#dfp-ad-overlay .block-dfp').find(".dfp-inner:visible").length) {
           $('#dfp-ad-overlay').css('visibility','visible');
           setTimeout(function(){
             $('#dfp-ad-overlay .dfp-inner').hide();
             $('#dfp-ad-overlay').css('visibility','hidden');
           }, Drupal.settings.ad_timeout);
        }
        if (typeof Drupal.settings.thehill_mostpopular !== 'undefined' &&  Drupal.settings.thehill_mostpopular.tag !== '') {
          refreshSlot(Drupal.settings.thehill_mostpopular.tag);
        }
      }
    });
  });

  $('#dfp-ad-overlay .hide_overlay').click(function(e) {
    e.preventDefault();
    $('#dfp-ad-overlay .dfp-inner').hide();
    $('#dfp-ad-overlay').css('visibility','hidden');
  });

// signup_form
  if ($("#cc_signup_form_1").size())
  {
    var o = jQuery("#block-constant-contact-1");
    var f = $("#cc_signup_form_1");
    var h = o.height();
    if ($("#cc_signup_form_1 .captcha").length > 0) {
      h = h + 107;
    }
    o.height(121);

    $("#cc_signup_form_1 .form-text").first().focus(function()
    {
      o.animate({"height": h});
    });
    if ($('.signup-error',f).length > 0) {
      if (o.length > 0) {
        o.animate({"height": h});
        var to = o.position().top - $('#header').height();
        $("html, body").animate({ scrollTop: to });
      }
      $('.signup-error').each(function(){
        if (!$(this).hasClass('processed')) {
          item_class = $(this).attr('class').replace('signup-error ', '');
          parent = $('#'+item_class).parent();
          $(this).detach().appendTo(parent);
          $(this).addClass('processed');
        }
      });
    }
    $('.error', f).focus(function(){
      $(this).removeClass('error');
      $(this).parent().find('.signup-error').hide();
    });
  }

// add social-share-separator
  $("#block-social-share-social-share > a").each(function(i) {
    if ($(this).is(":visible") && i > 0) {
      $(this).before($("<span class='social-share-separator'></span>"));
    }
  });
  var activeLinks = $('#block-system-main-menu a.active')
      ,topLevelActiveLinks = $('#block-system-main-menu>ul>li>a.active')
  activeLinks.addClass('forced-active-trail')
    .parent('li').addClass('forced-active-trail')

  /**
    * if active link in menu presents repeatedly
    * and in top level of menu presists one of them
    * we will delete classes ['active-trail','forced-active-trail'] in li elements
    * that has nested ul with active links (a)
    *
   **/
  if( activeLinks.length > 1 && topLevelActiveLinks.length ){
    $('#block-system-main-menu .expanded ul a.active').parents('li')
      .removeClass('active-trail forced-active-trail');
  }

  var body = $('.node-people.view-mode-full .field-name-body .field-items');
  if (body.length != 0) {
    var body_item = body.find('.field-item');
    if (body_item.text().length > 300) {
      h_body = body_item.height();
      body.append('<span class="more">More</span>').find('.more').click(function() {
        var more = $(this);
        if (body_item.hasClass('expanded')) {
          body_item.removeClass('expanded').animate({ height: h_body }, 'fast', function() {
            more.text('More');
          });
        } else {
          var h_max = body_item.css('height', 'auto').height();
          body_item.height(h_body).addClass('expanded').animate({ height: h_max }, 'fast', function() {
            more.text('Close');
          });
        }
      });
    }
  }

  $('.sponsored_info').mouseenter(function() {
    var $content = $(this).next().show();
    if (!$content.hasClass('processed')) {
      $content.addClass('processed').mouseleave(function(){
        $(this).hide();
      })
    }
  });

  // Changes disqus comment format
  var step = 1;
  chekDisqusComment = setInterval(function() {
    _comment = $('.disqus-comments').text();
    if (_comment.length > 4) {
      _num = parseInt(_comment);
      _count = (!isNaN(_num)) ? _num : 0;
      $('.disqus-comments').html("<span></span> " + _count.toLocaleString("en")).show();
      $('.show-comments > span').html("(" + _count.toLocaleString("en") + ")");
      clearInterval(chekDisqusComment);
    } else if (step >= 250) {
      clearInterval(chekDisqusComment);
    }
    ++step;
  }, 200);

  // Add arrow to Columnist dropdown
  $(".page-columnists #content ul.term-queue-links li").first().find("a").append('<span class="arrow">arrow</span>');

  // Signup Page
  $(".page-signup .form-type-checkboxes .form-type-checkbox").each(function(i, elem) {
    $checkBox = $(this);
    if ((i == 0) && ($("#cc_signup_form_1 .form-item .signup-error").length == 0)) {
      $checkBox.addClass("selected");
      $checkBox.find("input[type='checkbox']").attr("checked", "checked");
    } else {
      checkbox = $checkBox.find("input[type='checkbox']");
      if (checkbox.is(":checked")) {
        $checkBox.addClass("selected");
      }
    }
  });
  $(".page-signup .form-type-checkboxes .form-type-checkbox").click(function() {
    $checkBox = $(this);
    if ($checkBox.hasClass("selected")) {
      $checkBox.removeClass("selected");
      $checkBox.find("input[type='checkbox']").removeAttr("checked");
    } else {
      $checkBox.addClass("selected");
      $checkBox.find("input[type='checkbox']").attr("checked", "checked");
    }
  });
  $(".page-signup .form-type-checkboxes .form-type-checkbox-select-all").click(function() {
    $checkBox = $(this);
    if ($checkBox.hasClass("selected")) {
      $checkBox.removeClass("selected");
      $(".page-signup .form-type-checkboxes .form-type-checkbox").each(function(i) {
        if (i > 0) {
          $check_box = $(this);
          if ($check_box.hasClass("selected")) {
            $check_box.removeClass("selected");
            $check_box.find("input[type='checkbox']").removeAttr("checked");
          }
        }
      });
    } else {
      $checkBox.addClass("selected");
      $(".page-signup .form-type-checkboxes .form-type-checkbox").each(function(i) {
        if (i > 0) {
          $check_box = $(this);
          if (!$check_box.hasClass("selected")) {
            $check_box.addClass("selected");
            $check_box.find("input[type='checkbox']").attr("checked", "checked");
          }
        }
      });
    }
  });

  $("body").keydown(function( event ) {
    if (event.which === 33) {
      event.preventDefault();
      var y = $(window).scrollTop();
      $("html, body").animate({ scrollTop: y - $(window).height() + 165 }, 600);
    }
    if (event.which === 34) {
      event.preventDefault();
      var y = $(window).scrollTop();
      $("html, body").animate({ scrollTop: y + $(window).height() - 165 }, 600);
    }
  });

  $('.popup').click(function(event) {
    var width  = 575,
        height = 400,
        left   = ($(window).width()  - width)  / 2,
        top    = ($(window).height() - height) / 2,
        url    = $(this).attr('href'),
        opts   = 'status=1' +
                 ',width='  + width  +
                 ',height=' + height +
                 ',top='    + top    +
                 ',left='   + left;

    window.open(url, $(this).text(), opts);

    return false;
  });

/*
 * todo: maybe it better to fix it in php?
 * fix "Tuesday, July 29 at 04:45 pm to at 08:45 pm" to "Tuesday, July 29 at 04:45 pm to 08:45 pm"
 */
  jQuery(".field-type-datetime .date-display-single").each(function()
  {
    var _text = jQuery(this).text();
    if (_text.indexOf('to at') != -1)
    {
       _text = jQuery(this).find(".date-display-end").text();
      jQuery(this).find(".date-display-end").text(_text.replace("at ", ""));
    }
  });

  if (!jQuery("#page .scrolling-content-item").length) {
    var block_disqus = jQuery('#page .region-content-bottom .block-disqus');
    if (block_disqus.length) {
      block_disqus.hide();
      block_disqus.before('<div id="show-disqus-comments" class="show-comments">Load Comments <span></span></div>');
      jQuery('#show-disqus-comments').click(function() {
        if (block_disqus.is(":visible")) {
          block_disqus.fadeOut();
          jQuery(this).html('Load Comments');
        } else {
          block_disqus.fadeIn();
          jQuery(this).html('Hide Comments');
        }
      });
    }
  }

  jQuery('.view-display-id-articles_just_in').bind('autorefresh_update', function(e,timestamp){
    Drupal.settings.views_autorefresh['articles-articles_just_in'].timestamp = timestamp;
    /*if (!jQuery('.just-in-refresh-total').length) {
      jQuery(this).find('.view-header').after('<div class="just-in-refresh-total" style="display:none;"><span>0</span> New</div>');
    }
    var refresh_total = jQuery('.just-in-refresh-total').addClass('visible');
    var new_items = jQuery('.view-display-id-articles_just_in div.views-row');
    if (new_items.length) {
      refresh_total.find('span').html(new_items.length);
      refresh_total.show();
    }
    refresh_total.click(function () {
      if (new_items.length) {
        var new_items_wrap = jQuery('.view-display-id-articles_just_in div.item-list ul');
        new_items.map(function () {
          var _li = jQuery('<li class="views-row h0"></li>').append(jQuery(this).clone().html());
          new_items_wrap.find('li').last().remove();
          new_items_wrap.prepend(_li);
          setTimeout(function(){
            _li.removeClass('h0');
          }, 0);
        });
        jQuery('.view-display-id-articles_just_in div.views-row').remove();
        refresh_total.removeClass('visible');
      }
    });*/
  });

  /**
   * Design #24247
   **/
  jQuery('.sticky_ads').each(function () {
    var _h = jQuery(this).data('height');
    if (_h > 0) {
      jQuery(this).parent().css({height: _h + 'px', position: 'relative'});
      jQuery(this).stick_in_parent({offset_top: jQuery('body').hasClass('admin-menu') ? 140 : 110});
    }
  });

  /**
   * Issue #25666
   */
  jQuery('.node-type-event-new .view-mode-full .field-name-body a img').each(function(){
    jQuery(this).parent().addClass('rollover-people-link');
  });
});

})(jQuery, Drupal, this, this.document);

(function ($) {
  $(document).ready(
    function () {
      var pageObjectExpandBtn = '.expanded-menu';
      var pageObjectExpandBttClose = '.expand-menu-close';
      var pageObjectParentExpandMenu = '.block.block-system.block-menu.first.last.odd';
      var pageObjectForClick = '.block.block-system.block-menu.first.last.odd, .expanded-menu';
      var pageObjectExpandListMenu = '.menu';
      var pageObjectWidth = 525;
      var pageObjectIconSearchWidth = 'icon-search-width';
      var pageObjectOpacityClass = 'opacity-form-icon';
      var pageObjectCloseSpan = '<span class="close-form-type-textfield"> </span>';
      var pageObjectCloseBtnIn = '.form-item.form-type-textfield.form-item-search-block-form';
      var pageObjectActionBtn = '#search-block-form .form-actions.form-wrapper';
      var pageObjectCloseBtn = '.close-form-type-textfield';
      var pageObjectNavigationRegion = '#block-menu-menu-top-menu';
      var pageObjectFloatIcon = '<a class="float-icon" href="/"></a>';
      var pageObjectFloatIconSelect = '.float-icon';
      var pageObjectFloatIconMenu = ' float-icon-pagination__menu';
      var pageObjectTitleBlock = '.block__title.block-title + ul';
      var pageObjectFloatIconBGPosition = ' bg-position-zero-pagination';
      var pageObjectHeaderBlocks = '#header .header_blocks';

      $(pageObjectCloseBtnIn).append(pageObjectCloseSpan);
      $(pageObjectNavigationRegion).prepend(pageObjectFloatIcon);
      $(pageObjectActionBtn).on(
        'click', function () {
          $(this).prev().width(pageObjectWidth);
          $(this).children().addClass(pageObjectOpacityClass);
          $(this).addClass(pageObjectIconSearchWidth);
        });
        if($(pageObjectHeaderBlocks)) {
          var HeaderBlocksHeiht = document.querySelector(pageObjectHeaderBlocks).clientHeight;
          if(HeaderBlocksHeiht < 40) {
            document.querySelector(pageObjectHeaderBlocks).style.height = 0;
          }
        }
      $(pageObjectCloseBtn).on(
        'click', function () {
          $(this).parent().width(0);
          $(pageObjectActionBtn).children().removeClass(pageObjectOpacityClass);
          $(pageObjectActionBtn).removeClass(pageObjectIconSearchWidth);
        });
      $(pageObjectExpandBtn).on('click', function(){
        $(pageObjectParentExpandMenu).addClass('show-expand-menu').animate({width:286});
        document.querySelector(pageObjectParentExpandMenu).style.overflow = 'auto';
        /*$(function () {
         var toolbox = $('#block-system-main-menu.block.block-system.block-menu.first.last.odd'),
          height = toolbox.height(),
          scrollHeight = toolbox.get(0).scrollHeight;
          toolbox.on('mousewheel', function(event, d) {
            if((this.scrollTop === (scrollHeight - height) && d <= 0) || (this.scrollTop === 0 && d > 0)) {
              event.preventDefault();
              console.log(scrollHeight);
            }
          });
        })*/
      });
      var expandMenu = document.querySelector(pageObjectParentExpandMenu);
      if (typeof expandMenu !== 'undefined') {
        expandMenu.addEventListener('scroll', scrollExpandMenu);
      }
      function scrollExpandMenu() {
        var expandMenuScrlH = expandMenu.scrollHeight - expandMenu.clientHeight;
        var expandMenuScrlPosition = expandMenu.scrollTop;
        if(expandMenuScrlPosition >= expandMenuScrlH) {
          expandMenu.scrollTop = expandMenuScrlH - 1;
        } else if(expandMenuScrlPosition == 0) {
          expandMenu.scrollTop = 1;
        }
      }
      $('#block-system-main-menu .menu .depth-1 > a').on('click',
        function () {
          if($(this).parent().children().length ==1) {
            $.cleanData($(this));
          } else {
            $(this).next().toggle( function() {
              $(this).addClass('d-block');
            });
            return false;
          }
        }).next().hide();
      $('#block-system-main-menu .menu .depth-1 > a[href="/policy"] + ul.menu').removeAttr('style');
      $(document).click(function(event) {
        if ($(event.target).closest(pageObjectForClick).length) return;
        $(pageObjectParentExpandMenu).animate({
          width:0
        });
        event.stopPropagation();
      });
      $(pageObjectExpandBttClose).click(function() {
        $(pageObjectParentExpandMenu).animate({
          width:0
        });
      });
      var pageObjectFooterSignUp = document.querySelector('#block-thehill-blocks-footer-signup');
      if(pageObjectFooterSignUp){
        var pageObjectSign = document.querySelector('#block-thehill-blocks-footer-signup input.form-text');
        var pageObjectSignLabel = document.querySelector('#block-thehill-blocks-footer-signup label');
        pageObjectSign.addEventListener("focus", focusLabel );
        function focusLabel() {
          pageObjectSignLabel.classList.add('top');
        }
        pageObjectSign.addEventListener("blur", lostFocusLabel);
        function lostFocusLabel() {
          pageObjectSignLabel.classList.remove('top');
        }
      }
      setTimeout(function(){
        if ($('#header_blocks .region-header .block-dfp').height() <= 0) {
          $('#header_blocks .region-header').addClass('d-none');
        }
      }, 500);
      if($('.alphabetical_navigation').length > 0){
        $('.alphabetical_navigation')
                                    .append('<span class="left-arrow"></span>')
                                    .append('<span class="right-arrow"></span>');
        function hideArrow(){
          var scroll = $('.alphabetical_navigation ul').scrollLeft();
          //console.log('hideArrow ' + scroll);
          if(scroll <= 0) {
            $('.left-arrow').addClass('d-none');
          } else if (scroll > 700) {
            $('.right-arrow').addClass('d-none');
            $('.left-arrow').removeClass('d-none');
          } else {
            $('.left-arrow').removeClass('d-none');
            $('.right-arrow').removeClass('d-none');
          }
        }
        hideArrow();
        $('.alphabetical_navigation .right-arrow').on('click', function(){
          var scroll = $('.alphabetical_navigation ul').scrollLeft();
          if(scroll <= 100) {
            $('.alphabetical_navigation ul').scrollLeft(560);
            //console.log('right scrooll ' + scroll);
          } else if (scroll <= 560) {
            $('.alphabetical_navigation ul').scrollLeft(880);
            //console.log('right if else ' + scroll);
          }
          hideArrow();
        });
        $('.alphabetical_navigation .left-arrow').on('click', function(){
          var scroll = $('.alphabetical_navigation ul').scrollLeft();
          if(scroll <= 560) {
            $('.alphabetical_navigation ul').scrollLeft(0);
            //console.log('left scrl' + scroll);
          } else if (scroll >= 560) {
            $('.alphabetical_navigation ul').scrollLeft(560);
          }
          hideArrow();
        });
      }

      setInterval(function () {
        var pageObjectDfpBlock = document.querySelector('[id*=block-dfp-1x1]');
        var pageObjectUtContainer = document.querySelector('body .ut_container');
        var pageObjectIdUtContainer = document.querySelector('[id*=ut_container]')
        var pageObjectNavigation = document.querySelector('#header #navigation');
        var pageObjectExpandedBtn = document.querySelector('#block-system-main-menu');
        var pageObjectAdminPannel = document.querySelector('body.admin-menu #admin-menu');
        var pageObjectHeaderDFP = document.querySelector('[id*=block-dfp-1x1]');

        if(pageObjectDfpBlock && pageObjectUtContainer && pageObjectAdminPannel){
          pageObjectExpandedBtn.style.top = '29px';
          pageObjectIdUtContainer.style.zIndex = '1';
        } else if (pageObjectDfpBlock && pageObjectUtContainer) {
          var pageObjectUtContainerHeight = document.querySelector('body .ut_container').offsetHeight;
          var pageObjectNavigationTop = pageObjectNavigation.getBoundingClientRect();
          var pageObjectHeaderHeight = document.querySelector('body #header').offsetHeight;
          pageObjectExpandedBtn.style.top = 0;
          pageObjectIdUtContainer.style.zIndex = '1';
          pageObjectHeaderDFP.style.height = 0;
          pageObjectHeaderDFP.style.lineHeight = 0;
          pageObjectHeaderDFP.style.margin = 0;
        }
      },300);
    }
  );

  $(document).scroll(function () {
    var pageObjectNavigationMenu = '.region-navigation';
    var pageObjectLeftSideLogo = 'img.logo';
    var pageObjectHeroImgLogo = '.hero-img img.logo';
    var pageObjectFloatIconSelect = '.float-icon';
    var pageObjectFloatIconShow = 'float-icon__show';
    var pageObjectFloatIconMenu = 'float-icon__menu';
    var pageObjectFloatIconBGPosition = 'bg-position-zero';
    var pageObjectBgYpositionProperty = 'background-position';
    var pageObjectTitleBlock = '#block-menu-menu-top-menu .block__title.block-title';
    var topNavigationMenu = $(pageObjectNavigationMenu).offset().top;
    var topLeftSideLogo = $(pageObjectLeftSideLogo).offset().top;

    if($('.hero-img').length > 0) {
      var topHeroImg = $(pageObjectHeroImgLogo).offset().top;
      if (topNavigationMenu >= topHeroImg) {
        $(pageObjectFloatIconSelect).addClass(pageObjectFloatIconShow);
        $(pageObjectTitleBlock).next().addClass(pageObjectFloatIconMenu);
        var yPosition = function () {
          var pixel = parseInt(((topHeroImg - topNavigationMenu ) / 2.4) + 90);
          if (pixel > 0) {
            $(pageObjectFloatIconSelect).removeClass(pageObjectFloatIconBGPosition);
            return pixel;
          } else {
            $(pageObjectFloatIconSelect).addClass(pageObjectFloatIconBGPosition);
          }
        };
        yPosition();
        $(pageObjectFloatIconSelect).css(pageObjectBgYpositionProperty, 0 + ' ' + yPosition()+'px');
      } else {
        $(pageObjectFloatIconSelect).removeClass(pageObjectFloatIconShow);
        $(pageObjectTitleBlock).next().removeClass(pageObjectFloatIconMenu);
      }
    } else {
      if (topNavigationMenu >= topLeftSideLogo) {
        $(pageObjectFloatIconSelect).addClass(pageObjectFloatIconShow);
        $(pageObjectTitleBlock).next().addClass(pageObjectFloatIconMenu);
        var yPosition = function () {
          var pixel = parseInt(((topLeftSideLogo - topNavigationMenu ) / 2.4) + 90);
          if (pixel > 0) {
            $(pageObjectFloatIconSelect).removeClass(pageObjectFloatIconBGPosition);
            return pixel;
          } else {
            $(pageObjectFloatIconSelect).addClass(pageObjectFloatIconBGPosition);
          }
        };
        yPosition();
        $(pageObjectFloatIconSelect).css(pageObjectBgYpositionProperty, 0 + ' ' + yPosition()+'px');
      } else {
        $(pageObjectFloatIconSelect).removeClass(pageObjectFloatIconShow);
        $(pageObjectTitleBlock).next().removeClass(pageObjectFloatIconMenu);
      }
    }
    $(".article-tags").each(function(){
      var currentText = $(this).html().replace(/\,+/g, '');
      $(this).html(currentText);
    });
  });
})(jQuery);

(function($) {
  Drupal.behaviors.socialShareCount = {
    attach: function(context) {
      jQuery('.social-share-count').each(function() {
        var containerElm = jQuery(this);
        var containerUrl = jQuery(this).attr('data-href');

        window.socialShareCountJSONPCallback = function(resp) {
          var socialShareCountValues = 0;
          if (typeof resp.share !== 'undefined' && resp.share.share_count) {
            // This is facebook responce.
            socialShareCountValues = resp.share.share_count;
          }
          containerElm.html(socialShareCountValues.toLocaleString("en"));
        }

        if (containerElm.text().trim() == '0') {
          jQuery.getJSON('http://graph.facebook.com/?id='+containerUrl+'&callback=?', socialShareCountJSONPCallback);
        }
      });
    }
  };

  /**
   * Design #24247
   **/
  Drupal.behaviors.stickyads = {
    attach: function(context) {
      var STICK_TIMEOUT = 2000;
      if (typeof PREBID_TIMEOUT !== 'undefined') {
        //STICK_TIMEOUT += PREBID_TIMEOUT;
      }
      setTimeout(function(){
        jQuery('.sticky_ads:not(.sticky_completed)').each(function () {
          var _h = jQuery(this).data('height');
          if (_h > 0) {
            jQuery(this).addClass('sticky_completed');
            jQuery(this).parent().css({height: _h + 'px', position: 'relative'});
            jQuery(this).stick_in_parent({offset_top: jQuery('body').hasClass('admin-menu') ? 140 : 110});
          }
        });
      }, STICK_TIMEOUT);
    }
  };

})(jQuery);
;
/*
Copyright 2013 Michael Countis

MIT License: http://opensource.org/licenses/MIT
*/

(function(){
	"use strict";

	window.googletag = window.googletag || {};
	window.googletag.cmd = window.googletag.cmd || [];
	
	googletag.cmd.push(function(){
		
		if(googletag.hasOwnProperty("on") || googletag.hasOwnProperty("off") || googletag.hasOwnProperty("trigger") || googletag.hasOwnProperty("events"))
			return;
		
		var 	old_log = googletag.debug_log.log,
		events = [],
  addEvent = function (name, id, match) {
      events.push({
          "name"  :name,
          "id"    :id,
          "match" :match
      });
  };

  addEvent("gpt-google_js_loaded",                    8, /Google service JS loaded/ig);
  addEvent("gpt-gpt_fetch",                           46, /Fetching GPT implementation/ig);
  addEvent("gpt-gpt_fetched",                         48, /GPT implementation fetched\./ig);
  addEvent("gpt-page_load_complete",                  1, /Page load complete/ig);
  addEvent("gpt-queue_start",                         31, /^Invoked queued function/ig);

  addEvent("gpt-service_add_slot",                    40, /Associated ([\w]*) service with slot ([\/\w]*)/ig);
  addEvent("gpt-service_add_targeting",               0, /Setting targeting attribute ([\w]*) with value ([\w\W]*) for service ([\w]*)/ig);
  addEvent("gpt-service_collapse_containers_enable",  78, /Enabling collapsing of containers when there is no ad content/ig);
  addEvent("gpt-service_create",                      35, /Created service: ([\w]*)/ig);
  addEvent("gpt-service_single_request_mode_enable",  63, /Using single request mode to fetch ads/ig);

  addEvent("gpt-slot_create",                         2, /Created slot: ([\/\w]*)/ig);
  addEvent("gpt-slot_add_targeting",                  17, /Setting targeting attribute ([\w]*) with value ([\w\W]*) for slot ([\/\w]*)/ig);
  addEvent("gpt-slot_fill",                           50, /Calling fillslot/ig);
  addEvent("gpt-slot_fetch",                          3, /Fetching ad for slot ([\/\w]*)/ig);
  addEvent("gpt-slot_receiving",                      4, /Receiving ad for slot ([\/\w]*)/ig);
  addEvent("gpt-slot_render_delay",                   53, /Delaying rendering of ad slot ([\/\w]*) pending loading of the GPT implementation/ig);
  addEvent("gpt-slot_rendering",                      5, /^Rendering ad for slot ([\/\w]*)/ig);
  addEvent("gpt-slot_rendered",                       6, /Completed rendering ad for slot ([\/\w]*)/ig);

		googletag.events = googletag.events || {};

		googletag.on = function(events,op_arg0/*data*/,op_arg1/*callback*/){
			if(!op_arg0)
				return this;

			events = events.split(" ");

			var	data = op_arg1 ? op_arg0 : undefined,
				callback = op_arg1 || op_arg0,
				ei = 0,e = '';
			
			callback.data = data;

			for(e = events[ei = 0]; ei < events.length; e = events[++ei])
				(this.events[e] = this.events[e] || []).push(callback);

			return this;
		};


		googletag.off = function(events,handler){
			events = events.split(" ");
			var	ei = 0,e = "",
				fi = 0,f = function(){};
			
			for(e = events[ei]; ei < events.length; e = events[++ei]){
				if(!this.events.hasOwnProperty(e))
					continue;

				if(!handler){
					delete this.events[e];
					continue;
				}

				fi = this.events[e].length - 1;
				for(f = this.events[e][fi]; fi >= 0; f = this.events[e][--fi])
					if(f == handler)
						this.events[e].splice(fi,1);
				if(this.events[e].length === 0)
					delete this.events[e];
			}

			return this;
		};


		googletag.trigger = function(event,parameters){

			if(!this.events[event] || this.events[event].length === 0)
				return this;
			
			var	parameters = parameters || [],
				fi = 0,f = this.events[event][fi];
			
			for(fi,f;fi < this.events[event].length;f = this.events[event][++fi])
				if(f.apply(this,[{data:f.data}].concat(parameters)) === false)
					break;

			return this;
		};
  
  googletag.debug_log.log = function (level, message, service, slot, reference) {
      var args = Array.prototype.slice.call(arguments),
          e = 0;
      if (message && typeof(message.getMessageId()) === 'number') {
          for (e; e < events.length; e++) {
              if (message.getMessageId() === events[e].id) {
                  googletag.trigger(events[e].name, args);
              }
          }
      }
      return old_log.apply(this,arguments);
  };

	});
})();
;
// $Id$
/*
 * Drupal Most Popular - Showcase the most popular content across your Drupal website and engage your audience.
 * Copyright © 2009-2012 New Signature
 * 
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * You can contact New Signature by electronic mail at labs@newsignature.com -or- by U.S. Postal Service at 1100 H St. NW, Suite 940, Washington, DC 20005.
 */
/**
 * @file Adds javascript actions to the most popular block.
 */
(function($) {
  Drupal.behaviors.mostpopular = {
    attach: function(context) {

      // Get the configuration options
      var options = $.extend(Drupal.behaviors.mostpopular.defaultOptions,
          Drupal.settings.mostpopular);
  
      // Attach to all the most popular blocks on the page
      var parents = $(options.blockSelector, context);
      parents.each(function() {
        var block = $(this);

        var timerId = setInterval(function() {
          if (block.find('li.ad .dfp-inner').filter(":visible").length == 0) {
            block.removeClass('extend');
            clearInterval(timerId);
          }
        }, 100);

        setTimeout(function() {
          clearInterval(timerId);
        }, 10000);

        var serviceTabs = block.find(options.servicesSelector).filter('[data-sid]');
        var intervalTabs = block.find(options.intervalsSelector).filter('[data-iid]');
  
        // Keep track of the page we're currently looking at
        var selected = { 'sid' : null, 'iid' : null };
        var initial = true;
        
        // Get our current page from the cookies
        var bid = block.attr('data-bid');
        var cookie = $.cookie('mostpopular-' + bid);
        if (cookie) {
          var parts = cookie.split('/');
          selected.sid = parts[0];
          selected.iid = parts[1];
        } else {
          if (typeof Drupal.settings.thehill_mostpopular !== 'undefined') {
            selected.sid = Drupal.settings.thehill_mostpopular.sid;
            selected.iid = Drupal.settings.thehill_mostpopular.iid;
          }
        }
  
        // Create a content container
        var content = block.find(options.contentSelector);
        var wrapper = content.wrap("<div />").parent()
        .css({
          position : 'relative'
        });
  
        // Create a throbber image
        if (options.showThrobber) {
          var throbber = $(Drupal.theme('MostPopularThrobber'))
          .css({
            position : 'absolute',
            zIndex : 100
          }).appendTo(wrapper).hide();
  
          // Redefine the show function for the throbber to center it
          throbber.centerAndShow = function() {
            var top = parseInt((wrapper.outerHeight({margin: true}) - throbber.height()) / 2);
            var left = parseInt((wrapper.outerWidth({margin: true}) - throbber.width()) / 2);
            throbber.css({
              top : top,
              left : left
            }).show();
          };
        }
  
        // -----------------------------------------------------
        // Bind all the links to services
        serviceTabs.each(function() {
          var tab = $(this).data('service', true);
          var sid = tab.attr('data-sid');
          
          var link = $('<a href="#"/>')
            .text(tab.text())
            .click(function() {
              selected.sid = sid;
              
              getSelected(tab);              
              return false;
            });
          tab.html(link);
          tab.click(function() {
            return link.click();            
          });
          
          // If this service is currently selected, load the content
          if (!selected.sid) {
            selected.sid = sid;
          }
          if (selected.sid == sid) {
            tab.addClass(options.selectedClass);
          }
        });
  
        // -----------------------------------------------------
        // Bind all the links to intervals
        intervalTabs.each(function() {
          var tab = $(this).data('interval', true);
          var iid = tab.attr('data-iid');
          
          var link = $('<a href="#"/>')
            .text(tab.text())
            .click(function() {
              selected.iid = iid;
              
              getSelected(tab);
              return false;
            });
          tab.html(link);
          tab.click(function() {
            initial = false;
            link.click();
          });
          
          // If this interval is currently selected, load the content
          if (!selected.iid) {
            selected.iid = iid;
          }
          if (selected.iid == iid && initial === false) {
            tab.click();
          }
        });
        
        function getSelected(tab) {
          if (selected.sid && selected.iid) {
            startReload();
            
            var path = selected.sid + '/' + selected.iid;
            
            // Save the cookie
            $.cookie('mostpopular-' + bid, path, { path: '/' });
            
            // Fetch the content via AJAX
            var url = options.url + '/' + bid + '/' + path;
            $.get(url, function(data) {
              onGet(tab, data);
            });
          }
        }
        
        /**
         * This function is called when there is new data from the AJAX call.
         * 
         * @param link
         *   The link object that clicked.
         * @param data
         *   The new HTML sent back from Drupal.
         */
        function onGet(tab, data) {
          finishReload(data);
  
          // Select the appropriate tabs
          if (tab.data('service')) {
            serviceTabs.removeClass(options.selectedClass);
          }
          else if (tab.data('interval')) {
            intervalTabs.removeClass(options.selectedClass);
          }
          tab.addClass(options.selectedClass);
          refreshSlot(Drupal.settings.thehill_mostpopular.tag);          
          return false;
        }
  
        /**
         * Starts the process of reloading the most popular items, by hiding
         * the existing content and showing the throbber, if necessary.
         * 
         * The hideContent() method defined in the options will be called.
         */
        function startReload() {
          // Show the throbber and dim the content
          if (throbber) {
            throbber.centerAndShow();
          }
          options.hideContent(content);
        }
  
        /**
         * Finishes the process of reloading the most popular items, by showing
         * the new content and hiding the throbber, if necessary.
         * 
         * The showContent() method defined in the options will be called.
         * 
         * @param response
         *   A JSON response from Drupal.  It contains one key, 'data', whose
         *   value is an HTML string to render.
         */
        function finishReload(response) {
          // Replace the content, fade it back in and hide the throbber
          options.showContent(content, response);
          Drupal.behaviors.thehill_carousel.attach();
          if (throbber) {
            throbber.hide();
          }
        }
      });
    },
  
    /**
     * Defines the default options. Override these options in
     * Drupal.settings.mostpopular.
     */
    defaultOptions: {  
      'hideContent' : function(content) {
        content.fadeTo(200, 0.5);
      },
      'showContent' : function(content, html) {
        content.html(html).fadeTo(200, 1.0);
      },
      'showThrobber' : true,
      'blockSelector' : '.mostpopular-block',
      'servicesSelector' : 'ul.mostpopular--services li',
      'intervalsSelector' : 'ul.mostpopular--intervals li',
      'contentSelector' : 'div.mostpopular--content',
      'selectedClass' : 'selected',
      'url' : '/mostpopular/ajax'
    }
  };

  /**
   * Provides a default theme for the throbber that appears when content is
   * reloading.   You can override this in your own theme.
   * 
   * @return An HTML string to render the throbber.
   */
  Drupal.theme.prototype.MostPopularThrobber = function() {
    return '<div class="ahah-progress ahah-progress-throbber"><div class="throbber">&nbsp;</div></div>';
  };
  
})(jQuery);
;

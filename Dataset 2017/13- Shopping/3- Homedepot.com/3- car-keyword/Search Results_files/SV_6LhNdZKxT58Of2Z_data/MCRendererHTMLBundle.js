qrequire.define("renderers/html/questions/MCDLRendererHTML",["watch","renderers/html/questions/MCSARendererHTML","dejavu"],function(e,n,i){"use strict";return i.Class.declare({$name:"MCDLRendererHTML",$extends:n,selectChoice:function(e,n,i){if(i&&-1!==i.indexOf("~")){var t=i.split("~");i=t[2],i&&this.$super(e,n,i)}else this.$super(e,n,i)}.$bound()})}),qrequire.define("renderers/html/questions/MCSBRendererHTML",["watch","renderers/html/questions/MCSARendererHTML","dejavu","utils","log"],function(e,n,i,t,o){"use strict";return i.FinalClass.declare({$name:"MCSBRendererHTML",$extends:n,initialize:function(e){this.$super(e),this.__stripHTMLFromChoices()},__stripHTMLFromChoices:function(){t.each(this.runtime.Choices,function(e,n){e.Display=this.stripHTMLTags(e.Display)}.$bind(this))},selectChoice:function(e,n,i){if(i&&-1!==i.indexOf("~")){var t=i.split("~");3!==t.length&&o.error("EJFE061","MCSB selection has incorrect option value: "+i,"error"),i=t[2]}this.$super(e,n,i)}.$bound()})}),qrequire.define("renderers/html/questions/MCMSBRendererHTML",["renderers/html/questions/MCRendererHTML","dejavu","utils","watch","core/window"],function(e,n,i,t,o){"use strict";return n.Class.declare({$name:"MCMSBRendererHTML",$extends:e,initialize:function(e){this.$super(e),e.isIOS=!!o.navigator.platform&&/ipad|iphone|ipod/.test(o.navigator.platform.toLowerCase()),this.__stripHTMLFromChoices()},__stripHTMLFromChoices:function(){i.each(this.runtime.Choices,function(e,n){e.Display=this.stripHTMLTags(e.Display)}.$bind(this))},_watchSelected:function(){t.watch(this.runtime,"Selected",this.selectChoice)}.$bound(),selectChoice:function(e,n,t){t&&i.isArray(t)&&(i.each(this.runtime.Choices,function(e,n){e.Selected=-1!==t.indexOf("QR~"+this._id+"~"+n)},this),this.responseChanged())}.$bound()})}),qrequire.define("renderers/html/questions/MCMACBRendererHTML",["renderers/html/questions/MCRendererHTML","dejavu","watch","utils"],function(e,n,i,t){"use strict";return n.Class.declare({$name:"MCMACBRendererHTML",$extends:e,_hasExclusiveChoice:!1,canChangeResponse:!0,initialize:function(e){this.$super(e)},selectChoice:function(e,n,i){i&&t.each(this.runtime.ChoiceGroups,function(e){"SAWithinQuestion"===t.get(e,"Options.Selection")&&t.each(e.ChoiceGroupOrder,function(e){this.runtime.Choices[e].Selected=e==i}.$bind(this))}.$bind(this))}.$bound(),selectChoiceFromGroup:function(e,n){n&&e&&t.each(this.runtime.ChoiceGroups[e].ChoiceGroupOrder,function(e){this.runtime.Choices[e].Selected=e==n},this)}.$bound(),_watchSelected:function(){this.$super(),i.watch(this.runtime,"Selected",this.selectChoice),t.each(this.runtime.Choices,function(e,n){i.watch(e,"Selected",function(e,i,t){this.canChangeResponse?(this.canChangeResponse=!1,this._updateChoiceSelection(n,t),this.canChangeResponse=!0,this.responseChanged()):this._updateChoiceSelection(n,t)}.$bind(this))}.$bind(this)),t.each(this.runtime.ChoiceGroups,function(e,n){i.watch(e,"Selected",function(e,i,t){this.selectChoiceFromGroup(n,t)}.$bind(this))}.$bind(this))},_updateChoiceSelection:function(e,n){if(n){var i=this.runtime.Choices[e].Exclusive;i?t.each(this.runtime.Choices,function(i,t){i.Selected=t==e&&n},this):t.each(this.runtime.Choices,function(e,n){e.Exclusive&&(e.Selected=!1)},this)}}.$bound(),_shouldMakeLablesUniformHeight:function(){return"MACOL"==this.runtime.Selector||"MAHR"==this.runtime.Selector?!0:!1},setChoiceAnswerValue:function(e,n,i){return this.runtime.Choices[e]?(this.runtime.Choices[e].Selected=!!i,!0):!1}})}),qrequire.define("templates/html/questions/MCDL.html",[],function(){return'<h2 class="noStyle">\n  <label class="QuestionText BorderColor" for="QR~{{=Q.runtime.ID}}">{{=Q.runtime.QuestionText}}</label>\n</h2>\n<div class="QuestionBody">\n  <select class="ChoiceStructure Selection QR-{{=Q.runtime.ID}}" name="QR~{{=Q.runtime.ID}}" id="QR~{{=Q.runtime.ID}}" data-runtime-value="runtime.Selected">\n    <option value="QR~{{=Q.runtime.ID}}~null"></option>\n    {{? Q.runtime.ChoiceGroupOrderSetup}}\n      {{~ Q.runtime.ChoiceGroupOrder :groupId:index}}\n        {{? Q.runtime.ChoiceGroups[groupId]}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          <optgroup class="group" label="{{!Q.runtime.ChoiceGroups[groupId].GroupLabel}}">\n          {{?}}\n            {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId:idx}}\n              <option class="Selection" value="{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}">{{=Q.runtime.Choices[choiceId].Display}}</option>\n            {{~}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          </optgroup>\n          {{?}}\n        {{??}}\n          <option class="Selection" value="{{=groupId}}" id="QR~{{=Q.runtime.ID}}~{{=groupId}}">{{=Q.runtime.Choices[groupId].Display}}</option>\n        {{?}}\n      {{~}}\n    {{??}}\n      {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n        <option class="Selection" value="{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}">{{=Q.runtime.Choices[choiceId].Display}}</option>\n      {{~}}\n    {{?}}\n  </select>\n</div>\n'}),qrequire.define("templates/html/questions/MCSB.html",[],function(){return'<h2 class="noStyle">\n  <label class="QuestionText BorderColor" for="QR~{{=Q.runtime.ID}}">{{=Q.runtime.QuestionText}}</label>\n</h2>\n<div class="QuestionBody">\n  <select size="10" class="ChoiceStructure Selection LargeSelection QR-{{=Q.runtime.ID}}" name="QR~{{=Q.runtime.ID}}" id="QR~{{=Q.runtime.ID}}" data-runtime-value="runtime.Selected">\n    {{? Q.runtime.ChoiceGroupOrderSetup}}\n      {{~ Q.runtime.ChoiceGroupOrder :groupId:index}}\n        {{? Q.runtime.ChoiceGroups[groupId]}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          <optgroup label="{{=Q.runtime.ChoiceGroups[groupId].GroupLabel}}" class="group">\n          {{?}}\n            {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId:idx}}\n              <option class="Selection" value="{{=choiceId}}">{{= Q.runtime.Choices[choiceId].Display }}</option>\n            {{~}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          </optgroup>\n          {{?}}\n        {{??}}\n          <option class="Selection" value="{{=groupId}}">{{= Q.runtime.Choices[groupId].Display }}</option>\n        {{?}}\n      {{~}}\n    {{??}}\n      {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n        <option class="Selection" value="{{=choiceId}}">{{= Q.runtime.Choices[choiceId].Display }}</option>\n      {{~}}\n    {{?}}\n  </select>\n</div>\n'}),qrequire.define("templates/html/questions/MCSACOLTX.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input selected="selected" choiceid="{{=choiceId }}" class="radio QR-{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}-{{=choiceId }}" type="radio" name="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}" id="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}~{{=choiceId }}" value="{{=choiceId }}" data-runtime-checked="runtime.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n\n{{##def.TableRows:\n  <!-- d is the magic delta number we use to calculate the index -->\n  {{ var entriesPerCol = [];\n      var perColCount = Math.floor(ChoiceOrder.length/Q.runtime.ColumnCount);\n      var modIndex = ChoiceOrder.length % Q.runtime.ColumnCount;\n      for (var i = 0; i < Q.runtime.ColumnCount; i++) {\n        entriesPerCol.push(perColCount);\n        if (i < modIndex) {\n          entriesPerCol[i]++;\n        }\n      }\n  }}\n\n  {{ var d = Math.ceil(ChoiceOrder.length/Q.runtime.ColumnCount); }}\n  <!-- This is a tricky algorithm to build the columns -->\n  {{ for(var r = 0; r < d; r++) { }}\n    {{ var entriesCumulative = 0; }}\n    {{ var rowClass = (r%2) === 0 ? \'reg\' : \'alt\'; }}\n    <tr class="{{=rowClass}}">\n      {{ for(var c = 0; c < Q.runtime.ColumnCount; c++) { }}\n\n        <!-- calculate the index -->\n        <!-- choices go top down, left to right, so a question with 4 columns and 6 choices will be:\n              1  3  5  6\n              2  4\n        -->\n        {{\n          if (c > 0) {\n            entriesCumulative += entriesPerCol[c - 1];\n          }\n          var newIndex = (r < entriesPerCol[c]) ? entriesCumulative + r : undefined;\n        }}\n\n        <!-- If the index i exists in the.ChoiceOrder we use the choice, otherwise we fill an empty placeholder -->\n        {{ var choiceId = ChoiceOrder[newIndex]; }}\n        {{ if(choiceId !== undefined) { }}\n          <td class="ControlContainer">\n            {{#def.ControlContainerContent}}\n          </td>\n          <!-- LabelContainer needs to have both for now because there\'s a misspelling in the CSS -->\n          <td width="{{=100/Q.runtime.ColumnCount}}%" class="LabelContainer LabelContatiner ">\n            {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "SA":true}; }}\n            {{#def.Choice:choiceArgs}}\n          </td>\n        {{ } else { }}\n          <td class="">&nbsp;</td>\n          <td class="">&nbsp;</td>\n        {{ } }}\n      {{ } }}\n    </tr>\n  {{ } }}\n#}}\n\n<!-- END PARTIALS -->\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n<div class="QuestionBody">\n  <table role="presentation" class="ChoiceStructure" cellpadding="0" cellspacing="0">\n    <tbody>\n    {{var ChoiceOrder = Q.runtime.ChoiceOrder;}}\n    {{? Q.runtime.ChoiceGroupOrderSetup}}\n      {{ChoiceOrder = [];}}\n      {{~ Q.runtime.ChoiceGroupOrder :groupId}}\n        {{? Q.runtime.ChoiceGroups[groupId]}}\n          {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId}}\n            {{ChoiceOrder.push(choiceId);}}\n          {{~}}\n        {{??}}\n          {{ChoiceOrder.push(groupId);}}\n        {{?}}\n      {{~}}\n    {{?}}\n\n    {{#def.TableRows}}\n    </tbody>\n  </table>\n</div>\n'}),qrequire.define("templates/html/questions/MCSAHRTX.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input choiceid="{{=choiceId }}" class="radio QR-{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}-{{=choiceId }}" type="radio" name="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}" id="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}~{{=choiceId }}" value="{{=choiceId }}" data-runtime-checked="runtime.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n#}}\n\n<!-- END PARTIALS -->\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n\n<div class="QuestionBody">\n  {{var ChoiceOrder = Q.runtime.ChoiceOrder;}}\n  {{? Q.runtime.ChoiceGroupOrderSetup}}\n    {{ChoiceOrder = [];}}\n    {{~ Q.runtime.ChoiceGroupOrder :groupId}}\n      {{? Q.runtime.ChoiceGroups[groupId]}}\n        {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId}}\n          {{ChoiceOrder.push(choiceId);}}\n        {{~}}\n      {{??}}\n        {{ChoiceOrder.push(groupId);}}\n      {{?}}\n    {{~}}\n  {{?}}\n  {{if (Q.runtime.LabelPosition === "SIDE"){ }}\n          <ul class="ChoiceStructure">\n            {{~ ChoiceOrder :choiceId:index }}\n              {{ var rowClass = (index%2) === 0 ? \'\' : \'alt\'; }}\n              <li class="Selection {{=rowClass}}">\n                {{#def.ControlContainerContent}}\n                <label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n                {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "SA":true}; }}\n                {{#def.Choice:choiceArgs}}\n              </li>\n              {{~}}\n              <div class="clear"></div>\n        </ul>\n  {{ } else { }}\n\n\n<table role="presentation" class="ChoiceStructure" cellpadding="0" cellspacing="0" border="0">\n  <tbody>\n    <tr>\n    {{~ ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'\' : \'alt\'; }}\n      <!-- LabelContainer needs to have both for now because there\'s a misspelling in the CSS -->\n      <td width="{{=100/ChoiceOrder.length}}%" class="LabelContainer LabelContatiner {{=rowClass}}">\n          {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "SA":true}; }}\n          {{#def.Choice:choiceArgs}}\n          <label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n      </td>\n    {{~}}\n\n    </tr>\n    <tr>\n\n    {{~ ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'\' : \'alt\'; }}\n      <td style="width: {{=100/ChoiceOrder.length}}%;" class="ControlContainer {{=rowClass}}">\n        {{#def.ControlContainerContent}}\n      </td>\n    {{~}}\n\n    </tr>\n  </tbody>\n</table>\n  {{ } }}\n</div>\n'}),qrequire.define("templates/html/questions/MCNPS.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input choiceid="{{=choiceId }}" class="radio QR-{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}-{{=choiceId }}" type="radio" name="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}" id="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID }}{{?}}~{{=choiceId }}" value="{{=choiceId }}" data-runtime-checked="runtime.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n#}}\n\n\n<!-- Partial for defining the LabelContainerContent -->\n{{##def.LabelContainerContent:\n<span class="LabelWrapper">\n<label id="{{=Q.runtime.ID }}-{{= choiceId }}-label" for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="SingleAnswer" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected">\n{{? Q.runtime.Choices[choiceId].Image }}\n{{ if(Q.runtime.ChoiceTextPosition === \'Bottom\' || Q.runtime.ChoiceTextPosition === \'Right\') { }}\n<img src="{{=Q.runtime.Choices[choiceId].Image.ImageLocation}}" alt="{{=Q.runtime.Choices[choiceId].Image.Display}}">\n{{ } }}\n{{ if(Q.runtime.ChoiceTextPosition === \'Bottom\') { }}<br>{{ } }}\n{{?}}\n<span data-runtime-html="runtime.Choices.{{=choiceId}}.Display"></span>\n{{? Q.runtime.Choices[choiceId].Image }}\n{{ if(Q.runtime.ChoiceTextPosition === \'Top\') { }}<br>{{ } }}\n{{ if(Q.runtime.ChoiceTextPosition === \'Top\' || Q.runtime.ChoiceTextPosition === \'Left\') { }}\n<img src="{{=Q.runtime.Choices[choiceId].Image.ImageLocation}}" alt="{{=Q.runtime.Choices[choiceId].Image.Display}}">\n{{ } }}\n{{?}}\n</label>\n</span>\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n<!-- END PARTIALS -->\n\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n\n<div class="QuestionBody">\n  {{if (Q.runtime.LabelPosition === "SIDE"){ }}\n          <ul class="ChoiceStructure">\n            {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n              {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n              <li class="Selection {{=rowClass}}">\n                  {{#def.ControlContainerContent}}\n                  {{#def.LabelContainerContent}}\n              </li>\n              {{~}}\n              <div class="clear"></div>\n        </ul>\n  {{ } else { }}\n\n\n<table role="presentation" class="ChoiceStructure" cellpadding="0" cellspacing="0" border="0">\n  <tbody>\n    {{ var numLabels = Q.runtime.ColumnLabelsOrder.length, numChoices = Q.runtime.ChoiceOrder.length; }}\n    {{ if (numLabels) { }}\n      {{ var cellWidth = 100 / numLabels; }}\n      <tr>\n        <td class="ColumnLabels" colspan="{{=numChoices}}">\n          <table style="width:100%">\n            <tbody>\n              <tr>\n                {{~Q.runtime.ColumnLabelsOrder :index:orderIndex}}\n                  {{ var align = \'Center\'; }}\n                  {{ if (numLabels > 1 && index == 1) align = \'First\'; }}\n                  {{ if (numLabels > 1 && index == numLabels) align = \'Last\'; }}\n                  <th class=\'ColumnLabel {{=align}}\'\n                      width="{{=cellWidth}}%;"\n                      data-runtime-html="runtime.ColumnLabels.{{=index}}.Display">\n                  </th>\n                {{~}}\n              </tr>\n            </tbody>\n          </table>\n        </td>\n      </tr>\n    {{ } }}\n    <tr>\n    {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n      <!-- LabelContainer needs to have both for now because there\'s a misspelling in the CSS -->\n      <td width="{{=100/Q.runtime.ChoiceOrder.length}}%" class="LabelContainer LabelContatiner {{=rowClass}}">\n      {{#def.LabelContainerContent}}\n      </td>\n    {{~}}\n\n    </tr>\n    <tr>\n\n    {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n      <td style="width: {{=100/Q.runtime.ChoiceOrder.length}}%;" class="ControlContainer {{=rowClass}}">\n        {{#def.ControlContainerContent}}\n      </td>\n    {{~}}\n\n    </tr>\n  </tbody>\n</table>\n  {{ } }}\n</div>\n'}),qrequire.define("templates/html/questions/MCMSB.html",[],function(){return'\n\n<h2 class="noStyle">\n  <label class="QuestionText BorderColor" for="QR~{{=Q.runtime.ID}}">{{=Q.runtime.QuestionText}}</label>\n</h2>\n\n<div class="QuestionBody">\n  <select multiple="" size="10" class="ChoiceStructure QR-{{=Q.runtime.ID}}" name="QR~{{=Q.runtime.ID}}[]" id="QR~{{=Q.runtime.ID}}" data-runtime-value="runtime.Selected">\n    {{? Q.runtime.isIOS}}<optgroup disabled></optgroup>{{?}}\n    {{? Q.runtime.ChoiceGroupOrderSetup}}\n      {{~ Q.runtime.ChoiceGroupOrder :groupId:index}}\n        {{? Q.runtime.ChoiceGroups[groupId]}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          <optgroup class="group" label="{{!Q.runtime.ChoiceGroups[groupId].GroupLabel}}">\n          {{?}}\n          {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId:idx}}\n            <option class="Selection" value="QR~{{=Q.runtime.ID}}~{{=choiceId}}" data-runtime-text="runtime.Choices.{{=choiceId}}.Display" ></option>\n          {{~}}\n          {{? !Q.runtime.ChoiceGroups[groupId].Options.HideTitle}}\n          </optgroup>\n          {{?}}\n        {{??}}\n          <option class="Selection" value="QR~{{=Q.runtime.ID}}~{{=groupId}}" data-runtime-text="runtime.Choices.{{=groupId}}.Display" ></option>\n        {{?}}\n      {{~}}\n    {{??}}\n      {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n        <option class="Selection" value="QR~{{=Q.runtime.ID}}~{{=choiceId}}" data-runtime-text="runtime.Choices.{{=choiceId}}.Display" ></option>\n      {{~}}\n    {{?}}\n  </select>\n  <div class="clear zero"></div>\n</div>\n'}),qrequire.define("templates/html/questions/MCMACOLTX.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input choiceid="{{=choiceId}}" class="checkbox QR-{{=Q.runtime.ID}}-{{=choiceId}}" type="checkbox" name="QR~{{=Q.runtime.ID}}~{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}" value="Selected" data-runtime-checked="runtime.Choices.{{=choiceId}}.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-checkbox" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n\n{{##def.TableRows:\n  <!-- d is the magic delta number we use to calculate the index -->\n  {{ var entriesPerCol = [];\n      var perColCount = Math.floor(ChoiceOrder.length/Q.runtime.ColumnCount);\n      var modIndex = ChoiceOrder.length % Q.runtime.ColumnCount;\n      for (var i = 0; i < Q.runtime.ColumnCount; i++) {\n        entriesPerCol.push(perColCount);\n        if (i < modIndex) {\n          entriesPerCol[i]++;\n        }\n      }\n  }}\n\n  {{ var d = Math.ceil(ChoiceOrder.length/Q.runtime.ColumnCount); }}\n  <!-- This is a tricky algorithm to build the columns -->\n  {{ for(var r = 0; r < d; r++) { }}\n    {{ var entriesCumulative = 0; }}\n    {{ var rowClass = (r%2) === 0 ? \'reg\' : \'alt\'; }}\n    <tr class="{{=rowClass}}">\n      {{ for(var c = 0; c < Q.runtime.ColumnCount; c++) { }}\n\n        <!-- calculate the index -->\n        <!-- choices go top down, left to right, so a question with 4 columns and 6 choices will be:\n              1  3  5  6\n              2  4\n        -->\n        {{\n          if (c > 0) {\n            entriesCumulative += entriesPerCol[c - 1];\n          }\n          var newIndex = (r < entriesPerCol[c]) ? entriesCumulative + r : undefined;\n        }}\n\n        <!-- If the index i exists in the.ChoiceOrder we use the choice, otherwise we fill an empty placeholder -->\n        {{ var choiceId = ChoiceOrder[newIndex]; }}\n        {{ if(choiceId !== undefined) { }}\n          <td class="ControlContainer">\n            {{#def.ControlContainerContent}}\n          </td>\n          <!-- LabelContainer needs to have both for now because there\'s a misspelling in the CSS -->\n          <td width="{{=100/Q.runtime.ColumnCount}}%" class="LabelContainer LabelContatiner ">\n            {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "MA":true}; }}\n            {{#def.Choice:choiceArgs}}\n          </td>\n        {{ } else { }}\n          <td class="">&nbsp;</td>\n          <td class="">&nbsp;</td>\n        {{ } }}\n      {{ } }}\n    </tr>\n  {{ } }}\n#}}\n\n<!-- END PARTIALS -->\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n<div class="QuestionBody">\n  <table role="presentation" class="ChoiceStructure" cellpadding="0" cellspacing="0">\n    <tbody>\n    {{var ChoiceOrder = Q.runtime.ChoiceOrder;}}\n    {{? Q.runtime.ChoiceGroupOrderSetup}}\n      {{ChoiceOrder = [];}}\n      {{~ Q.runtime.ChoiceGroupOrder :groupId}}\n        {{? Q.runtime.ChoiceGroups[groupId]}}\n          {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId}}\n            {{ChoiceOrder.push(choiceId);}}\n          {{~}}\n        {{??}}\n          {{ChoiceOrder.push(groupId);}}\n        {{?}}\n      {{~}}\n    {{?}}\n\n    {{#def.TableRows}}\n    </tbody>\n  </table>\n</div>\n'}),qrequire.define("templates/html/questions/MCMAHRTX.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input choiceid="{{=choiceId}}" class="checkbox QR-{{=Q.runtime.ID}}-{{=choiceId}}" type="checkbox" name="QR~{{=Q.runtime.ID}}~{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}" value="Selected" data-runtime-checked="runtime.Choices.{{=choiceId}}.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n#}}\n\n<!-- END PARTIALS -->\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n\n<div class="QuestionBody">\n  {{var ChoiceOrder = Q.runtime.ChoiceOrder;}}\n  {{? Q.runtime.ChoiceGroupOrderSetup}}\n    {{ChoiceOrder = [];}}\n    {{~ Q.runtime.ChoiceGroupOrder :groupId}}\n      {{? Q.runtime.ChoiceGroups[groupId]}}\n        {{~ Q.runtime.ChoiceGroups[groupId].ChoiceGroupOrder :choiceId}}\n          {{ChoiceOrder.push(choiceId);}}\n        {{~}}\n      {{??}}\n        {{ChoiceOrder.push(groupId);}}\n      {{?}}\n    {{~}}\n  {{?}}\n  {{if (Q.runtime.LabelPosition === "SIDE"){ }}\n          <ul class="ChoiceStructure">\n            {{~ ChoiceOrder :choiceId:index }}\n              {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n              <li class="Selection {{=rowClass}}">\n                  {{#def.ControlContainerContent}}\n                  <label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-checkbox" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n                  {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "MA":true}; }}\n                  {{#def.Choice:choiceArgs}}\n              </li>\n              {{~}}\n              <div class="clear"></div>\n        </ul>\n  {{ } else { }}\n<table role="presentation" class="ChoiceStructure" cellpadding="0" cellspacing="0" border="0">\n  <tbody>\n    <tr>\n    {{~ ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n      <!-- LabelContainer needs to have both for now because there\'s a misspelling in the CSS -->\n      <td width="{{=100/ChoiceOrder.length}}%" class="LabelContainer LabelContatiner {{=rowClass}}">\n          {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "MA":true}; }}\n          {{#def.Choice:choiceArgs}}\n          <label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-checkbox" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n      </td>\n    {{~}}\n\n    </tr>\n    <tr>\n\n    {{~ ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n      <td style="width: {{=100/ChoiceOrder.length}}%;" class="ControlContainer {{=rowClass}}">\n        {{#def.ControlContainerContent}}\n      </td>\n    {{~}}\n\n    </tr>\n  </tbody>\n</table>\n  {{ } }}\n</div>\n'}),qrequire.define("templates/html/questions/MCMAVRTX.html",[],function(){return'<!-- BEGIN PARTIALS -->\n<!-- Partial for defining the ControlContainerContent -->\n{{##def.ControlContainerContent:\n<input choiceid="{{=choiceId}}" class="checkbox QR-{{=Q.runtime.ID}}-{{=choiceId}}" type="checkbox" name="QR~{{=Q.runtime.ID}}~{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}" value="Selected" data-runtime-checked="runtime.Choices.{{=choiceId}}.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-checkbox" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n\n{{##def.ControlContainerContentSAGroup:\n<input choiceid="{{=choiceId}}" class="radio QR-{{=Q.runtime.ID}}-{{=choiceId}}" type="radio" name="QR~{{=Q.runtime.ID}}~{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}" value="{{=choiceId}}" data-runtime-checked="runtime.ChoiceGroups.{{=choiceGroupID}}.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n\n\n{{##def.ControlContainerContentSAQuestion:\n<input choiceid="{{=choiceId}}" class="radio QR-{{=Q.runtime.ID}}-{{=choiceId}}" type="radio" name="QR~{{=Q.runtime.ID}}~{{=choiceId}}" id="QR~{{=Q.runtime.ID}}~{{=choiceId}}" value="{{=choiceId}}" data-runtime-checked="runtime.Selected" {{? Q.isDisabled()}}disabled="disabled"{{?}} aria-labelledby="{{=Q.runtime.ID }}-{{= choiceId }}-label">\n<label for="QR~{{? Q.runtime.ID }}{{=Q.runtime.ID}}{{?}}~{{=choiceId}}" class="q-radio" aria-hidden="true" data-runtime-class-q-checked="runtime.Choices.{{=choiceId}}.Selected"></label>\n#}}\n\n<!-- END PARTIALS -->\n\n<h2 class="noStyle">\n  <div class="QuestionText BorderColor">{{=Q.runtime.QuestionText}}</div>\n</h2>\n\n<div class="QuestionBody">\n  <ul class="ChoiceStructure">\n  {{? Q.runtime.ChoiceGroups }}\n      {{ var choiceIndex = 0, choiceId;}}\n      {{~ Q.runtime.ChoiceGroupOrder :choiceGroupID:index }}\n          {{var group = Q.runtime.ChoiceGroups[choiceGroupID];}}\n          {{? group}}\n\n              {{? !group.Options.HideTitle }}\n              <li class="ChoiceGroup">\n                  <span data-runtime-html="runtime.ChoiceGroups.{{=choiceGroupID}}.GroupLabel"></span>\n              </li>\n              <ul class="ChoiceGroupStructure">\n              {{?}}\n                  {{~ group.ChoiceGroupOrder :choiceId:idx }}\n                      {{ var rowClass = (choiceIndex%2) === 0 ? \'reg\' : \'alt\'; }}\n                      {{ choiceIndex++;}}\n                      <li class="Selection {{=rowClass}}">\n                          {{var choiceArgs;}}\n                          {{? group.Options.Selection && group.Options.Selection == "SAWithinGroup"}}\n                            {{#def.ControlContainerContentSAGroup}}\n                            {{choiceArgs = {"Q":Q, "choiceId":choiceId, "SA":true}; }}\n                          {{?? group.Options.Selection && group.Options.Selection == "SAWithinQuestion"}}\n                            {{#def.ControlContainerContentSAQuestion}}\n                            {{choiceArgs = {"Q":Q, "choiceId":choiceId, "SA":true}; }}\n                          {{??}}\n                            {{#def.ControlContainerContent}}\n                            {{choiceArgs = {"Q":Q, "choiceId":choiceId, "MA":true}; }}\n                          {{?}}\n                          {{#def.Choice:choiceArgs}}\n                          <div class="clear"></div>\n                      </li>\n                  {{~}}\n\n              {{? !group.Options.HideTitle }}\n              </ul>\n              {{?}}\n          {{??}}\n              {{ var rowClass = (choiceIndex%2) === 0 ? \'reg\' : \'alt\'; }}\n              {{ choiceIndex++;}}\n              <li class="Selection {{=rowClass}}">\n                  {{choiceId = choiceGroupID;}}\n                  {{#def.ControlContainerContent}}\n                  {{var choiceArgs = {"Q":Q, "choiceId":choiceGroupID, "MA":true}; }}\n                  {{#def.Choice:choiceArgs}}\n                  <div class="clear"></div>\n              </li>\n          {{?}}\n      {{~}}\n  {{??}}\n      {{~ Q.runtime.ChoiceOrder :choiceId:index }}\n      {{ var rowClass = (index%2) === 0 ? \'reg\' : \'alt\'; }}\n      <li class="Selection {{=rowClass}}">\n          {{#def.ControlContainerContent}}\n          {{var choiceArgs = {"Q":Q, "choiceId":choiceId, "MA":true}; }}\n          {{#def.Choice:choiceArgs}}\n          <div class="clear"></div>\n      </li>\n      {{~}}\n  {{?}}\n  </ul>\n  <div class="clear zero"></div>\n</div>\n\n\n\n'}),qrequire.define("bundles/MCRendererHTMLBundle",function(){});
//# sourceMappingURL=MCRendererHTMLBundle.js.map